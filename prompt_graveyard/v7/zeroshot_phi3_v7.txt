<|user|>
You are a summarization model. Generate a summary of a text taken from a scientific paper. Divide the summary into key concepts or subsections if they are present in the text. Per concept/subsection list all cited authors in order they are presented in the text. Per author notate their contribution to the topic. The examples of how authors can be notated in the text are "Author et al. (2019)" or "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)". If no authors are introduced, assign the contribution to the authors of the paper the text was taken from.
The contribution notation must follow this structure:
- Author at al. (2020): contribution
To notate the authors of the text, use the following structure:
- Authors of the paper: contribution
Ensure that your answer is accurate and doesn't contain any information not directly supported by the text. Ensure that the summary includes all authors mentioned in the text and their contributions.

Text:"Approaches to disfluency detection task fall into three main categories: noisy channel models, parsing-based approaches and sequence tagging approaches.  Noisy channel models (NCMs) (Johnson and Charniak, 2004;Johnson et al., 2004) use complex tree adjoining grammar (TAG) (Shieber and Schabes, 1990) based channel models to find the "rough copy" dependencies between words.  The channel model uses the similarity between the reparandum and the repair to allocate higher probabilities to exact copy reparandum words.  Using the probabilities of TAG channel model and a bigram language model (LM) derived from training data, the NCM generates n-best disfluency analyses for each sentence at test time.  The analyses are then reranked using a language model which is sensitive to the global properties of the sentence, such as a syntactic parser based LM (Johnson and Charniak, 2004;Johnson et al., 2004).  Some works have shown that rescoring the n-best analyses with external n-gram (Zwarts and Johnson, 2011) and deep learning LMs (Jamshid Lou and Johnson, 2017) trained on large speech and non-speech corpora, and using the LM scores along with other features (i.e.  pattern match and NCM ones) into a MaxEnt reranker (Johnson et al., 2004) improves the performance of the baseline NCM, although this creates complex runtime dependencies.   Parsing-based approaches detect disfluencies while simultaneously identifying the syntactic structure of the sentence.  Typically, this is achieved by augmenting a transition-based dependency parser with anew action to detect and remove the disfluent parts of the sentence and their dependencies from the stack (Rasooli and Tetreault, 2013;Honnibal and Johnson, 2014;Yoshikawa et al., 2016).  Joint parsing and disfluency detection can compare favorably to pipelined approaches, but requires large annotated treebanks containing both disfluent and syntatic structures for training.   Our proposed approach, based on an autocorrelational neural network (ACNN), belongs to the class of sequence tagging approaches.  These approaches use classification techniques such as conditional random fields (Liu et al., 2006;Ostendorf and Hahn, 2013;Zayats et al., 2014;Ferguson et al., 2015), hidden Markov models (Liu et al., 2006;Schuler et al., 2010) and deep learning based models (Hough and Schlangen, 2015;Zayats et al., 2016) to label individual words as fluent or disfluent.  In much of the previous work on sequence tagging approaches, improved performance has been gained by proposing increasingly complicated labeling schemes.  In this case, a model with begin-inside-outside (BIO) style states which labels words as being inside or outside of edit region is usually used as the baseline sequence tagging model.  Then in order to come up with different pattern matching lexical cues for repetition and correction disfluencies, they extend the baseline state space with new explicit repair states to consider the words at repair region, in addition to edit region (Ostendorf and Hahn, 2013;Zayats et al., 2014, 2016).  A model which uses such labeling scheme may generate illegal label sequences at test time.  As a solution, integer linear programming (ILP) constraints are applied to the output of classifier to avoid inconsistencies between neighboring labels (Georgila, 2009;Georgila et al., 2010;Zayats et al., 2016).  This contrasts with our more straightforward approach, which directly labels words as being fluent or disfluent, and does not require any post-processing or annotation modifications.   The most similar work to ours is recent work by Zayats et al. (2016) that investigated the performance of a bidirectional long-short term memory network (BLSTM) for disfluency detection.  Zayats et al. (2016) reported that a BLSTM operating only on words underperformed the same model augmented with hand-crafted pattern match features and POS tags by 7% in terms of f-score.  In addition to lexically grounded features, some works incorporate prosodic information extracted from speech (Kahn et al., 2005;Ferguson et al., 2015;Tran et al., 2018).  In this work, our primary motivation is to rectify the architectural limitations that prevent deep neural networks from automatically learning appropriate features from words alone.  Therefore, our proposed model eschews manually engineered features and other representations derived from dependency parsers, language models or tree adjoining grammar transducers that are used to find "rough copy" dependencies.  Instead, we aim to capture these kinds of dependencies automatically. "<|end|>
<|assistant|>