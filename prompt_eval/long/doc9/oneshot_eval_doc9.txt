<|user|>
You are a summarization model. Generate a summary of a text taken from a scientific paper. Divide the summary into key concepts and/or subsections. Divide the summary into subsections. Use either subsections present in the text, or create subsections based on the key topics discussed in the text. Subsections must be placed in the chronological order. Per subsection, list the cited authors that contributed to the topic of the subsection in chronological order. The list must be in the bullet point form. The examples of how authors can be notated in the text are "Author et al. (2019)" or "(Author et al., 2017)". If no authors are introduced, assign the contribution to the authors of the paper the text was taken from. The structure of each contribution must be as following:
- Author at al. (2020): contribution
To notate the authors of the paper the text was taken from, use the following structure:
- Authors of the paper: contribution
Ensure that your answer is accurate and doesn't contain any information not directly supported by the text.

Text: "Eye-tracking for NLP.  Eye-tracking data have proved to be associated with language comprehension activity in human brains by numerous research in neuroscience (Rayner, 1998;Henderson and Ferreira, 1993).  In cognitively motivated NLP, several studies have investigated the impact of eye-tracking data on NLP tasks.  In early works, these signals have been used in machine learning approaches to NLP tasks, such as part-of-speech tagging (Barrett et al., 2016), multiword expression extraction (Rohanian et al., 2017), syntactic category prediction (Barrett and Sgaard, 2015).  In neural models, eyetracking data are combined with word embeddings to improve various NLP tasks, such as sentiment analysis (Mishra et al., 2017) and NER (Hollenstein and Zhang, 2019).  Eye-tracking data have also been used to enhance or constrain neural attention in (Barrett et al., 2018;Sood et al., 2020b,a; Takmaz et al., 2020).   EEG for NLP.  Electroencephalography (EEG) measures potentials fluctuations caused by the activity of neurons in cerebral cortex.  The exploration of EEG data in NLP tasks is relatively limited.  Chen et al. (2012) improve the performance of automatic speech recognition (ASR) by using EEG signals to classify the speaker's mental state.  Hollenstein et al. (2019a) incorporate EEG signals into NLP tasks, including NER, relation extraction and sentiment analysis.  Additionally, Muttenthaler et al. (2020) leverage EEG features to regularize attention on relation extraction.   Adversarial Learning.  The concept of adversarial training originates from the Generative Adversarial Nets (GAN) (Goodfellow et al., 2014) in computer vision.  Since then, it has been also applied in NLP (Denton et al., 2015;Ganin et al., 2016).  Recently, a great variety of studies attempt to introduce adversarial training into multi-task learning in NLP tasks, such as Chinese NER (Cao et al., 2018), crowdsourcing learning (Yang et al., 2018), cross-lingual transfer learning (Chen et al., 2018;Kim et al., 2017), just name a few.  Different from these studies, we use adversarial learning to deeply align cognitive modality to textual modality at the sentence level. "<|end|>
<|assistant|>
1. **Eye-Tracking for NLP**:
   - **Rayner (1998)** and **Henderson and Ferreira (1993)** associated eye-tracking data with language comprehension activity in human brains.
   - In early works, eye-tracking signals were used in machine learning approaches for NLP tasks:
 	    - **Barrett et al. (2016)** applied eye-tracking data to part-of-speech tagging.
 	    - **Rohanian et al. (2017)** used eye-tracking data for multiword expression extraction.
 	    - **Barrett and Sgaard (2015)** explored eye-tracking data in syntactic category prediction.
   - Neural models combined eye-tracking data with word embeddings to improve NLP tasks:
 	    - **Mishra et al. (2017)** used eye-tracking data for sentiment analysis.
 	    - **Hollenstein and Zhang (2019)** incorporated eye-tracking data into named entity recognition (NER).
   - Eye-tracking data also influenced neural attention:
 	    - **Barrett et al. (2018)** and **Sood et al. (2020b,a)** explored enhancing or constraining neural attention using eye-tracking data.
 	    - **Takmaz et al. (2020)** investigated similar approaches.

2. **EEG for NLP**:
   - Electroencephalography (EEG) measures neuronal activity in the cerebral cortex.
   - Limited exploration of EEG data in NLP tasks:
 	    - **Chen et al. (2012)** improved automatic speech recognition (ASR) by classifying speaker mental states using EEG signals.
 	    - **Hollenstein et al. (2019a)** incorporated EEG signals into NLP tasks, including NER, relation extraction, and sentiment analysis.
 	    - **Muttenthaler et al. (2020)** used EEG features to regularize attention in relation extraction.

3. **Adversarial Learning in NLP**:
   - Adversarial training, originating from Generative Adversarial Nets (GANs) in computer vision, has been applied in NLP:
        - **Denton et al. (2015)** and **Ganin et al. (2016)** explored adversarial training.
    - Recent studies introduced adversarial training into multi-task NLP learning:
        - **Cao et al. (2018)** applied adversarial training to Chinese named entity recognition (NER).
        - **Yang et al. (2018)** used adversarial training for crowdsourcing learning.
        - **Chen et al. (2018)** and **Kim et al. (2017)** explored cross-lingual transfer learning using adversarial techniques.
        - The current study focuses on using adversarial learning to align cognitive modality with textual modality at the sentence level.<|end|>
<|user|>
You are a summarization model. Generate a summary of a text taken from a scientific paper by following the guidelines below:

   1. Divide the summary into subsections. Use either subsections present in the text, or create subsections based on the key topics discussed in the text. Subsections must be placed in the chronological order.
   2. Include the information (e.g., definition of a concept) that helps to understand the topic of subsection if it is provided in the text. Otherwise, ignore this step.
   3. Per subsection, list the cited authors that contributed to the topic of the subsection in chronological order. The list must be in the bullet point form. The examples of how authors can be notated in the text are "Author et al. (2019)" or "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)".
   4. For each author's entry, include the contribution they made, according to the text, on the topic of the subsection. These form the authors - contribution pair. There are two ways to spot a contribution:
      - When "Author et al. (2019)" notation is met in the text, the contribution follows next. It usually ends within the same sentence if not grammatically stated otherwise.
      - When the authors’ notation within the brackets is met (e.g. "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)"), the contribution can be found before the brackets. Do not include information after the brackets in the contribution.
   5. Some contributions are proposed by the authors of the target text. These contributions can be recognized by the use of the forms of the word “we” in the text (e.g., “our approach”, ”our motivation”, “we aim”).
   6. Use one bullet point to represent the authors - contribution pair.
   7. The author - contribution notation must follow one of these structures: 
      - If one author:
         - Author et al., 2020: contribution
      - If multiple authors: 
         - Author et al., 2020, Author et al., 2023, Author et al., 2008: contribution
      - If authors of the paper:
         - Authors of the paper: contribution
   8. Be precise in the body of contribution:
      - Do not use information not directly supported by the text
      - Do not leave out information necessary to understand the summary without reading the text (e.g., abbreviation definitions)
      - Be brief, include only the essential information

Ensure that your answer is accurate, brief and doesn't contain any information not directly supported by the text. Ensure that the summary includes all authors mentioned in the text and their contributions.

Text: "Domain adaptation strategies can be separated into four categories: data selection, data generation, instance weighting and model interpolation Chu and Wang (2018).  We focus our discussion on data selection and instance weighting, as these are closely related to our approach.   Data-centric methods.  Models are trained using in-domain and out-of-domain data to evaluate out-of-domain data and compute a similarity score.  Using a cut-off threshold on these scores the training data can be selected.  Language Models Moore and Lewis (2010); Axelrod et al. (2011); Duh et al. (2013) or joint models Cuong and Sima'an (2014); Durrani et al. (2015) can traditionally be applied to score corpora.  Recently convolutional neural networks (CNN) Chen et al. (2016) were used.  Our work has similarities to this work but uses instance weighting rather than data selection.   In settings where the amount of parallel training corpora is not sufficient, generating pseudo-parallel sentences by information retrieval Utiyama and Isahara (2003), self-enhancing Lambert et al. (2011) or parallel word embeddings Marie and Fujita (2017).  Aside from generating sentences, other approaches generate monolingual n-grams Wang et al. (2014) or parallel phrase pairs Chu (2015).   In general, data-centric methods (data selection and data generation) are not SMT specific and can be directly applied to NMT.  However, because these methods are not directly related to NMT's training criterion, they only lead to minor improvements Wang et al. (2017a).   Model-centric methods.  Instance Weighting is a technique from SMT and was introduced to NMT as well Wang et al. (2017b).  An in-domain language model was trained to measure the similarity between sentences and the in-domain data via cross-entropy.  The weights are then integrated into the training objective.  We improve on their work by using state-of-the-art neural classifiers and showing that they are more effective than cross-entropy.   Two works that are closer to our work are Wang et al. (2018) and Chen et al. (2017).  In Wang et al. (2018) they generate sentence embeddings for all in-domain sentences and then measure the distance between every sentence and the in-domain core.  The underlying assumption is that the core of all in-domain sentence embeddings is atypical representative and proximity in their sentence embeddings indicates being part of the same domain.  This approach is appropriate when we have in-domain parallel text, but we study a different scenario, with no access to in-domain parallel text, which means the encoder has no access to in-domain training examples.  In Chen et al. (2017) a domain classifier is incorporated into the NMT system, using features from the encoder to distinguish between in-domain and out-of-domain data.  The classifier probabilities are used to weight sentences with regard to their similarity to in-domain data, when training the neural network.  Scaling the loss function is similar to multiplying the learning rate with the instance weight.  The classifier and NMT are trained at the same time, whereas we chose an approach with pretrained neural classifiers which are trained on a small amount of monolingual data (the scenario we study) with no access to parallel in-domain data.   Finally, while some previous work we have mentioned did look at various ways to use domain classification, such previous work has not focused on how to weight the classifier probabilities for effective use in NMT, which we showed is important for obtaining translation quality improvements, particularly when using neural classifiers which can be overconfident. "<|end|>
<|assistant|>