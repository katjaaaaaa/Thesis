<|user|>
You are a summarization model. Generate a summary of a text taken from a scientific paper by following the guidelines below:

   1. Divide the summary into subsections. Use either subsections present in the text, or create subsections based on the key topics discussed in the text. Subsections must be placed in the chronological order.
   2. Include the information (e.g., definition of a concept) that helps to understand the topic of subsection if it is provided in the text. Otherwise, ignore this step.
   3. Per subsection, list the cited authors that contributed to the topic of the subsection in chronological order. The list must be in the bullet point form. The examples of how authors can be notated in the text are "Author et al. (2019)" or "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)".
   4. For each author's entry, include the contribution they made, according to the text, on the topic of the subsection. These form the authors - contribution pair. There are two ways to spot a contribution:
      - When "Author et al. (2019)" notation is met in the text, the contribution follows next. It usually ends within the same sentence if not grammatically stated otherwise.
      - When the authors’ notation within the brackets is met (e.g. "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)"), the contribution can be found before the brackets. Do not include information after the brackets in the contribution.
   5. Some contributions are proposed by the authors of the target text. These contributions can be recognized by the use of the forms of the word “we” in the text (e.g., “our approach”, ”our motivation”, “we aim”).
   6. Use one bullet point to represent the authors - contribution pair.
   7. The author - contribution notation must follow one of these structures: 
      - If one author:
         - Author et al., 2020: contribution
      - If multiple authors: 
         - Author et al., 2020, Author et al., 2023, Author et al., 2008: contribution
      - If authors of the paper:
         - Authors of the paper: contribution
   8. Be precise in the body of contribution:
      - Do not use information not directly supported by the text
      - Do not leave out information necessary to understand the summary without reading the text (e.g., abbreviation definitions)
      - Be brief, include only the essential information

Ensure that your answer is accurate, brief and doesn't contain any information not directly supported by the text. Ensure that the summary includes all authors mentioned in the text and their contributions.

Text: "Eye-tracking for NLP.  Eye-tracking data have proved to be associated with language comprehension activity in human brains by numerous research in neuroscience (Rayner, 1998;Henderson and Ferreira, 1993).  In cognitively motivated NLP, several studies have investigated the impact of eye-tracking data on NLP tasks.  In early works, these signals have been used in machine learning approaches to NLP tasks, such as part-of-speech tagging (Barrett et al., 2016), multiword expression extraction (Rohanian et al., 2017), syntactic category prediction (Barrett and Sgaard, 2015).  In neural models, eyetracking data are combined with word embeddings to improve various NLP tasks, such as sentiment analysis (Mishra et al., 2017) and NER (Hollenstein and Zhang, 2019).  Eye-tracking data have also been used to enhance or constrain neural attention in (Barrett et al., 2018;Sood et al., 2020b,a; Takmaz et al., 2020).   EEG for NLP.  Electroencephalography (EEG) measures potentials fluctuations caused by the activity of neurons in cerebral cortex.  The exploration of EEG data in NLP tasks is relatively limited.  Chen et al. (2012) improve the performance of automatic speech recognition (ASR) by using EEG signals to classify the speaker's mental state.  Hollenstein et al. (2019a) incorporate EEG signals into NLP tasks, including NER, relation extraction and sentiment analysis.  Additionally, Muttenthaler et al. (2020) leverage EEG features to regularize attention on relation extraction.   Adversarial Learning.  The concept of adversarial training originates from the Generative Adversarial Nets (GAN) (Goodfellow et al., 2014) in computer vision.  Since then, it has been also applied in NLP (Denton et al., 2015;Ganin et al., 2016).  Recently, a great variety of studies attempt to introduce adversarial training into multi-task learning in NLP tasks, such as Chinese NER (Cao et al., 2018), crowdsourcing learning (Yang et al., 2018), cross-lingual transfer learning (Chen et al., 2018;Kim et al., 2017), just name a few.  Different from these studies, we use adversarial learning to deeply align cognitive modality to textual modality at the sentence level. "<|end|>
<|assistant|>
1. **Eye-Tracking for NLP**:
   - **Rayner (1998)** and **Henderson and Ferreira (1993)** associated eye-tracking data with language comprehension activity in human brains.
   - In early works, eye-tracking signals were used in machine learning approaches for NLP tasks:
 	    - **Barrett et al. (2016)** applied eye-tracking data to part-of-speech tagging.
 	    - **Rohanian et al. (2017)** used eye-tracking data for multiword expression extraction.
 	    - **Barrett and Sgaard (2015)** explored eye-tracking data in syntactic category prediction.
   - Neural models combined eye-tracking data with word embeddings to improve NLP tasks:
 	    - **Mishra et al. (2017)** used eye-tracking data for sentiment analysis.
 	    - **Hollenstein and Zhang (2019)** incorporated eye-tracking data into named entity recognition (NER).
   - Eye-tracking data also influenced neural attention:
 	    - **Barrett et al. (2018)** and **Sood et al. (2020b,a)** explored enhancing or constraining neural attention using eye-tracking data.
 	    - **Takmaz et al. (2020)** investigated similar approaches.

2. **EEG for NLP**:
   - Electroencephalography (EEG) measures neuronal activity in the cerebral cortex.
   - Limited exploration of EEG data in NLP tasks:
 	    - **Chen et al. (2012)** improved automatic speech recognition (ASR) by classifying speaker mental states using EEG signals.
 	    - **Hollenstein et al. (2019a)** incorporated EEG signals into NLP tasks, including NER, relation extraction, and sentiment analysis.
 	    - **Muttenthaler et al. (2020)** used EEG features to regularize attention in relation extraction.

3. **Adversarial Learning in NLP**:
   - Adversarial training, originating from Generative Adversarial Nets (GANs) in computer vision, has been applied in NLP:
        - **Denton et al. (2015)** and **Ganin et al. (2016)** explored adversarial training.
    - Recent studies introduced adversarial training into multi-task NLP learning:
        - **Cao et al. (2018)** applied adversarial training to Chinese named entity recognition (NER).
        - **Yang et al. (2018)** used adversarial training for crowdsourcing learning.
        - **Chen et al. (2018)** and **Kim et al. (2017)** explored cross-lingual transfer learning using adversarial techniques.
        - The current study focuses on using adversarial learning to align cognitive modality with textual modality at the sentence level.<|end|>
<|user|>
You are a summarization model. Generate a summary of a text taken from a scientific paper. Divide the summary into key concepts or subsections if they are present in the text. Per concept/subsection list all cited authors in the order they are presented in the text. Per the author note their contribution to the topic.
The examples of how authors can be notated in the text are "Author et al. (2019)" or "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)".
Contributions are separated by either punctuation in the sentence or authors' notation in the text. When "Author et al. (2019)" notation is met in the text it means the contribution of the authors follows. If the "(Author et al., 2017)" or "(Author et al., 2017; Author et al., 1998; Author et al., 2022)" notation is met it means the contribution was before the brackets. After the brackets the new information follows, do not include it in the same contribution.
If no authors are introduced, assign the contribution to the authors of the paper the text was taken from.
The contribution notation must follow this structure:
- Author et al. (2020): contribution
If multiple authors contribute to one point, use the following structure:
- Author et al. (2020), Author et al. (2023), Author et al. (2008), Author et al. (2033): contribution
To notate the authors of the text, use the following structure:
- Authors of the paper: contribution
Ensure that your answer is accurate and doesn't contain any information not directly supported by the text. Ensure that the summary includes all authors mentioned in the text and their contributions.

Text:"Approaches to disfluency detection task fall into three main categories: noisy channel models, parsing-based approaches and sequence tagging approaches.  Noisy channel models (NCMs) (Johnson and Charniak, 2004;Johnson et al., 2004) use complex tree adjoining grammar (TAG) (Shieber and Schabes, 1990) based channel models to find the "rough copy" dependencies between words.  The channel model uses the similarity between the reparandum and the repair to allocate higher probabilities to exact copy reparandum words.  Using the probabilities of TAG channel model and a bigram language model (LM) derived from training data, the NCM generates n-best disfluency analyses for each sentence at test time.  The analyses are then reranked using a language model which is sensitive to the global properties of the sentence, such as a syntactic parser based LM (Johnson and Charniak, 2004;Johnson et al., 2004).  Some works have shown that rescoring the n-best analyses with external n-gram (Zwarts and Johnson, 2011) and deep learning LMs (Jamshid Lou and Johnson, 2017) trained on large speech and non-speech corpora, and using the LM scores along with other features (i.e.  pattern match and NCM ones) into a MaxEnt reranker (Johnson et al., 2004) improves the performance of the baseline NCM, although this creates complex runtime dependencies.   Parsing-based approaches detect disfluencies while simultaneously identifying the syntactic structure of the sentence.  Typically, this is achieved by augmenting a transition-based dependency parser with anew action to detect and remove the disfluent parts of the sentence and their dependencies from the stack (Rasooli and Tetreault, 2013;Honnibal and Johnson, 2014;Yoshikawa et al., 2016).  Joint parsing and disfluency detection can compare favorably to pipelined approaches, but requires large annotated treebanks containing both disfluent and syntatic structures for training.   Our proposed approach, based on an autocorrelational neural network (ACNN), belongs to the class of sequence tagging approaches.  These approaches use classification techniques such as conditional random fields (Liu et al., 2006;Ostendorf and Hahn, 2013;Zayats et al., 2014;Ferguson et al., 2015), hidden Markov models (Liu et al., 2006;Schuler et al., 2010) and deep learning based models (Hough and Schlangen, 2015;Zayats et al., 2016) to label individual words as fluent or disfluent.  In much of the previous work on sequence tagging approaches, improved performance has been gained by proposing increasingly complicated labeling schemes.  In this case, a model with begin-inside-outside (BIO) style states which labels words as being inside or outside of edit region is usually used as the baseline sequence tagging model.  Then in order to come up with different pattern matching lexical cues for repetition and correction disfluencies, they extend the baseline state space with new explicit repair states to consider the words at repair region, in addition to edit region (Ostendorf and Hahn, 2013;Zayats et al., 2014, 2016).  A model which uses such labeling scheme may generate illegal label sequences at test time.  As a solution, integer linear programming (ILP) constraints are applied to the output of classifier to avoid inconsistencies between neighboring labels (Georgila, 2009;Georgila et al., 2010;Zayats et al., 2016).  This contrasts with our more straightforward approach, which directly labels words as being fluent or disfluent, and does not require any post-processing or annotation modifications.   The most similar work to ours is recent work by Zayats et al. (2016) that investigated the performance of a bidirectional long-short term memory network (BLSTM) for disfluency detection.  Zayats et al. (2016) reported that a BLSTM operating only on words underperformed the same model augmented with hand-crafted pattern match features and POS tags by 7% in terms of f-score.  In addition to lexically grounded features, some works incorporate prosodic information extracted from speech (Kahn et al., 2005;Ferguson et al., 2015;Tran et al., 2018).  In this work, our primary motivation is to rectify the architectural limitations that prevent deep neural networks from automatically learning appropriate features from words alone.  Therefore, our proposed model eschews manually engineered features and other representations derived from dependency parsers, language models or tree adjoining grammar transducers that are used to find "rough copy" dependencies.  Instead, we aim to capture these kinds of dependencies automatically. "<|end|>
<|assistant|>